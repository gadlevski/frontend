/*
 * Подробное объяснение каждого параметра и типа настройки можно найти по адресу:
 * https://jestjs.io/docs/configuration
 */

import path from "path";

export default {
  // Автоматически очищать вызовы, экземпляры, контексты и результаты моков перед каждым тестом
  clearMocks: true,
  // Среда тестирования, которая будет использоваться для тестирования
  testEnvironment: 'jsdom',
  // Массив строк регулярных выражений, используемых для пропуска сбора покрытия
  coveragePathIgnorePatterns: [
    '/node_modules/',
  ],
  // Массив расширений файлов, используемых модулями
  moduleFileExtensions: [
    'js',
    'jsx',
    'ts',
    'tsx',
    'json',
    'node',
  ],
  // Массив имен каталогов, которые должны рекурсивно искать, начиная с расположения модуля, требующегося
  moduleDirectories: [
    'node_modules',
  ],
  // Глобальные шаблоны, которые использует Jest для определения файлов тестов
  testMatch: [
    '<rootDir>src/**/*(*.)@(spec|test).[tj]s?(x)',
  ],
  // Корневой каталог, который Jest должен сканировать для поиска тестов и модулей
  rootDir: '../../',

  // свойство для указания файлов, которые будут загружены после установки тестового окружения, но перед запуском тестов.
  // В этом случае, одним из таких файлов является 'setupTests.ts'
  setupFilesAfterEnv: ['<rootDir>config/jest/setupTests.ts'],

  // свойство определяет пути, в которых Jest будет искать модули.
  // В данном случае, Jest будет искать модули в папке 'src', расположенной в корневой директории проекта.
  modulePaths: [
    '<rootDir>src',
  ],

  moduleNameMapper: {
    '\\.s?css$': 'identity-obj-proxy',
    '\\.svg': path.resolve(__dirname, 'jestEmptyComponent.tsx'),
  },

  // Все импортированные модули в ваших тестах должны автоматически имитироваться
  // automock: false,

  // Прекратить выполнение тестов после `n` ошибок
  // bail: 0,

  // Каталог, в котором Jest должен хранить информацию о кэше зависимостей
  // cacheDirectory: "/tmp/jest_rs",

  // Определяет, должна ли собираться информация о покрытии при выполнении теста
  // collectCoverage: false,

  // Массив шаблонов глобов, указывающих набор файлов, для которых должна собираться информация о покрытии
  // collectCoverageFrom: undefined,

  // Каталог, в котором Jest должен размещать свои файлы покрытия
  // coverageDirectory: undefined,

  // Определяет, какой инструментарий должен использоваться для инструментирования кода для покрытия
  // coverageProvider: "babel",

  // Список имен репортеров, которые Jest использует при записи отчетов о покрытии
  // coverageReporters: [
  //   "json",
  //   "text",
  //   "lcov",
  //   "clover"
  // ],

  // Объект, который настраивает применение минимального порога для результатов покрытия
  // coverageThreshold: undefined,

  // Путь к пользовательскому извлекателю зависимостей
  // dependencyExtractor: undefined,

  // Делать вызовы устаревших API генерировать полезные сообщения об ошибках
  // errorOnDeprecated: false,

  // Конфигурация по умолчанию для фейковых таймеров
  // fakeTimers: {
  //   "enableGlobally": false
  // },

  // Принудительно собирать данные о покрытии из игнорируемых файлов с использованием массива шаблонов глобов
  // forceCoverageMatch: [],

  // Путь к модулю, который экспортирует асинхронную функцию, которая вызывается один раз перед всеми наборами тестов
  // globalSetup: undefined,

  // Путь к модулю, который экспортирует асинхронную функцию,которая вызывается один раз после всех наборов тестов
  // globalTeardown: undefined,

  // Набор глобальных переменных, которые должны быть доступны во всех средах тестирования
  // globals: {},

  // Максимальное количество рабочих, используемых для запуска ваших тестов. Может быть указано в % или числом. Например, maxWorkers: 10% будет использовать 10% от количества вашего ЦП + 1 в качестве максимального числа рабочих. maxWorkers: 2 будет использовать максимум 2 рабочих.
  // maxWorkers: "50%",





  // Отображение регулярных выражений на имена модулей или массив имен модулей, которые позволяют подменять ресурсы одним модулем
  // moduleNameMapper: {},

  // Массив строк регулярных выражений, сопоставляемых со всеми путями модулей перед тем, как они считаются 'видимыми' для загрузчика модулей
  // modulePathIgnorePatterns: [],

  // Активация уведомлений о результатах тестирования
  // notify: false,

  // Перечисление, которое указывает режим уведомления. Требуется { notify: true }
  // notifyMode: "failure-change",

  // Пресет, который используется в качестве основы для конфигурации Jest
  // preset: undefined,

  // Запускать тесты из одного или нескольких проектов
  // projects: undefined,

  // Используйте эту опцию конфигурации, чтобы добавить пользовательские репортеры в Jest
  // reporters: undefined,

  // Автоматически сбрасывать состояние моков перед каждым тестом
  // resetMocks: false,

  // Сброс реестра модулей перед запуском каждого отдельного теста
  // resetModules: false,

  // Путь к пользовательскому разрешителю
  // resolver: undefined,

  // Автоматическое восстановление состояния моков и реализации перед каждым тестом
  // restoreMocks: false,



  // Список путей к каталогам, которые Jest должен использовать для поиска файлов
  // roots: [
  //   "<rootDir>"
  // ],

  // Позволяет использовать пользовательский запускатель вместо стандартного запускателя тестов Jest
  // runner: "jest-runner",

  // Пути к модулям, которые выполняют некоторый код для настройки или настройки среды тестирования перед каждым тестом
  // setupFiles: [],

  // Список путей к модулям, которые выполняют некоторый код для настройки или настройки тестового фреймворка перед каждым тестом
  // setupFilesAfterEnv: [],

  // Количество секунд, после которого тест считается медленным и отображается соответствующим образом в результатах
  // slowTestThreshold: 5,

  // Список путей к модулям сериализации снимков, которые Jest должен использовать для снимкового тестирования
  // snapshotSerializers: [],


  // Параметры, которые будут переданы в testEnvironment
  // testEnvironmentOptions: {},

  // Добавляет поле местоположения к результатам тестирования
  // testLocationInResults: false,



  // Массив строк регулярных выражений, которые сопоставляются со всеми путями тестов, пропущенные тесты пропускаются
  // testPathIgnorePatterns: [
  //   "/node_modules/"
  // ],

  // Регулярное выражение или массив регулярных выражений, которые Jest использует для определения файлов тестов
  // testRegex: [],

  // Эта опция позволяет использовать пользовательский процессор результатов
  // testResultsProcessor: undefined,

  // Эта опция позволяет использовать пользовательский запускатель тестов
  // testRunner: "jest-circus/runner",

  // Сопоставление регулярных выражений с путями к трансформаторам
  // transform: undefined,

  // Массив строк регулярных выражений, которые сопоставляются со всеми путями исходных файлов, сопоставленные файлы пропускают преобразование


  // transformIgnorePatterns: [
  //   "/node_modules/",
  //   "\\.pnp\\.[^\\/]+$"
  // ],

  // Массив строк регулярных выражений, которые сопоставляются со всеми модулями перед тем, как загрузчик модулей автоматически возвратит для них заглушку
  // unmockedModulePathPatterns: undefined,

  // Определяет, должен ли быть отчет о каждом отдельном тесте во время выполнения
  // verbose: undefined,

  // Массив регулярных выражений, которые сопоставляются со всеми путями к файлам исходного кода перед повторным запуском тестов в режиме отслеживания
  // watchPathIgnorePatterns: [],

  // Использовать ли watchman для сканирования файлов
  // watchman: true,
};
